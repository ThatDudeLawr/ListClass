#include "Lista.h"

//Search for a specific position in the list
template<class T>
Node<T>* List<T>::GetAtIndex(int poz) const
{
	if (poz < 0 || poz >= Size())
	{
		return NULL;
	}

	Node<T>* i = m_start;

	while (poz)
	{
		if (!i)
		{
			return NULL;
		}

		i = i->getNext();
		poz--;
	}
	return i;
}

//Deletes all the nodes from the list
template<class T>
void List<T>::Empty()
{
	if (m_start == NULL)
	{
		return;
	}

	Node<T>* i;
	while (m_start)
	{
		i = m_start->getNext();
		delete m_start;
		m_start = i;
	}

	//TODO: Check if we need m_start = NULL;
	m_privEnd = NULL;
}

template<class T>
List<T>::List()
{
	m_start = m_privEnd = NULL;
}

template<class T>
List<T>::List(const T& val)
{
    m_start = m_privEnd = NULL;
    PushBack(val);
}

template<class T>
List<T>::List(const List<T>& list)
{
	m_start = m_privEnd = NULL;
	*this = list;
}

template<class T>
List<T>::~List()
{
	Empty();
}

//Add an element to the end of the list
template<class T>
void List<T>::PushBack(T val)
{
	Node<T>* nod;
	try
	{
		nod = new Node<T>(val);
	}
	catch (const std::bad_alloc&)
	{
		throw;
	}
	
	if (m_start == NULL)
	{
		m_start = nod;
		m_privEnd = nod;
	}
	else
	{
		m_privEnd->setNext(nod);
		m_privEnd = nod;
	}
}

//Add an element to the beginning of the list
template<class T>
void List<T>::PushFront(T val)
{
	Node<T>* nod;
	try
	{
		nod = new Node<T>(val);
	}
	catch (const std::bad_alloc&)
	{
		throw;
	}

	if (!m_start)
	{
		m_start = m_privEnd = nod;
	}
	else
	{
		nod->setNext(m_start);
		m_start = nod;
	}
}

//Deletes the last element from the list
template<class T>
T List<T>::PopBack()
{
	if (!m_privEnd)
	{
		return NULL;
	}

	T val = m_privEnd->getData();

	if (m_privEnd == m_start)
	{
		delete m_privEnd;
		m_privEnd = m_start = NULL;
		return val;
	}
	else
	{
		Node<T>* i = m_start;
		while (i->getNext() != m_privEnd)
		{
			i = i->getNext();
		}

		i->setNext(NULL);
		delete m_privEnd;
		m_privEnd = i;
		return val;
	}
}

//Deletes the first element of the list
template<class T>
T List<T>::PopFront()
{
	if (!m_start)
	{
		return NULL;
	}

	T val = m_start->getData();

	if (m_start == m_privEnd)
	{
		delete m_privEnd;
		m_privEnd = m_start = NULL;
		return val;
	}
	else
	{
		Node<T>* i = m_start->getNext();
		delete m_start;
		m_start = i;
		return val;
	}
}

//Return the list number of nodes
template<class T>
int List<T>::Size() const
{
	if (m_start == NULL)
	{
		return 0;
	}

	Node<T>* i = m_start;
	int count=1;

	while (i->getNext())
	{
		count++;
		i = i->getNext();
	}

	return count;
}

template<class T>
List<T>::operator T() const
{
    if (m_start != NULL)
    {
        return m_start->getData();
    }
    else
    {
        return NULL;
    }
}

//Makes the list accessible like an array(a[0], a[1], ...)
template<class T>
T List<T>::operator [] (int i) const
{
	Node<T>* nod = GetAtIndex(i);
	if (!nod)
	{
		return NULL;
	}
	else
	{
		return nod->getData();
	}
}

// Copy constructor on assigment overload.
template<class T>
List<T>& List<T>::operator=(const List<T>& list)
{
	Empty();
	const int & n = list.Size();
	for (int i = 0; i < n; i++)
	{
		PushBack(list[i]);
	}
	return *this;
}

template<class T>
inline bool List<T>::operator==(const List<T>& other)
{
    List<T>& currentList = (*this);

	int currentSize = Size();
	int otherSize	= other.Size();

	if (currentSize != otherSize) return false;

	for (int i = 0; i < currentSize; i++)
	{
		if (currentList[i] != other[i])
		{
			return false;
		}
	}

	return true;
}

template<class T>
inline bool List<T>::operator!=(const List<T>& other)
{
    return !(*this==other);
}

template<class T>
bool List<T>::operator<(const List<T>& other)
{
    List<T>& currentList = (*this);

    int currentSize = Size();
    int otherSize = other.Size();

    // If our list has more elements, it cannot be inside the other list.
    if (currentSize > otherSize) return false;

    for (int i = 0; i < currentSize; i++)
    {
        if (currentList[i] != other[i])
        {
            return false;
        }
    }

    return true;
}

template<class T>
bool List<T>::operator>(const List<T>& other)
{
    List<T>& currentList = (*this);

    int currentSize = Size();
    int otherSize = other.Size();

    // If our list has more elements, it cannot be inside the other list.
    if (currentSize > otherSize) return false;

    for (int i = 1; i <= currentSize ; i++)
    {
        if (currentList[currentSize - i] != other[otherSize - i])
        {
            return false;
        }
    }

    return true;
}

template<class T>
bool List<T>::operator<=(const List<T>& other)
{
    List<T>& currentList = (*this);

    int currentSize = Size();
    int otherSize = other.Size();

    // If our list has more elements, it cannot be inside the other list.
    if (currentSize > otherSize) return false;

    int currentIndex = 0, otherIndex = 0;
    
    while (currentIndex < currentSize && otherIndex < otherSize)
    {
        if (currentList[currentIndex] == other[otherIndex])
        {
            currentIndex++;
        }

        otherIndex++;
    }

    // If we iteratate through the whole list we've found all the elements.
    if (currentIndex >= currentSize) return true;

    return false;
}

template<class T>
bool List<T>::operator>=(const List<T>& other)
{
    List<T>& currentList = (*this);

    int currentSize = Size();
    int otherSize = other.Size();

    // If our list has more elements, it cannot be inside the other list.
    if (currentSize > otherSize) return false;

    int currentIndex = currentSize - 1, otherIndex = otherSize - 1;

    while (currentIndex >= 0 && otherIndex >= 0)
    {
        if (currentList[currentIndex] == other[otherIndex])
        {
            currentIndex--;
        }

        otherIndex--;
    }

    // If we iteratate through the whole list we've found all the elements.
    if (currentIndex < 0) return true;

    return false;
}

template<class T>
inline List<T>& List<T>::operator+(const List<T>& other)
{
    List<T>& result = (*this);

	for (int i = 0; i < other.Size(); i++)
	{
		result.PushBack(other[i]);
	}

	return result;
}

template<class T>
List<T>& List<T>::operator*(const List<T>& other)
{
	// TODO: insert return statement here
	const int& n = other.Size();
	List<T> a, b = *this;
	for (int i = 0; i < n; i++)
	{
		if (other[i] == b[i])
		{
			a.PushBack(other[i]);
		}
	}
	return a;
}

template<class T>
List<T>& List<T>::operator>>(int pos)
{
	int n = this->Size();
	List<T>& currentList = (*this);
	while (pos)
	{
		PushFront(currentList[n-1]);
		this->PopBack();
		pos--;
	}
	return currentList;
}

template<class T>
List<T>& List<T>::operator<<(int pos)
{
	List<T>& currentList = (*this);
	while (pos)
	{
		PushBack(currentList[0]);
		currentList.PopFront();
		pos--;
	}
	return currentList;
}
